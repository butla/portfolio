[tool.poetry]
name = "sample-backend-app"
version = "0.1.0"
description = "A sample backend app used to illustrate development and testing techniques."
authors = ["Michal Bultrowicz <michal.bultrowicz@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "sample_backend"}]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.115.4"
uvicorn = "^0.32.0"
sqlalchemy = "^2.0.36"
psycopg = {extras = ["binary"], version = "^3.2.3"}
tenacity = "^9.0.0"
pydantic-settings = "^2.6.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pdbpp = "^0.10.3"
coverage = "^7.6.4"
mypy = "^1.13.0"
ptpython = "^3.0.23"
alembic = "^1.14.0"
pytest-asyncio = "^0.21.0"
pgcli = "^4.1.0"
httpx = "^0.27.2"

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true

# Config documentation: https://docs.astral.sh/ruff/settings/
[tool.ruff]
target-version = "py312"
line-length = 110

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
preview = false

# Docs for the rules: https://docs.astral.sh/ruff/rules/
# This should be almost all rules with some exception. Listed in the order from docs.
# Excluded checkers:
# - CPY - copyright
select = ["F", "E", "W",
          "C90", "I", "N",
          "D", "UP", "YTT",
          "ANN", "ASYNC", "ASYNC1",
          "S", "BLE", "FBT",
          "B", "A", "COM",
          "C4", "DTZ", "T10", "DJ",
          "EM", "EXE", "ISC",
          "ICN", "G", "INP",
          "PIE", "T20", "PYI",
          "PT", "Q", "RSE",
          "RET", "SLF", "SLOT",
          "SIM", "TID", "TCH",
          "INT", "ARG", "PTH",
          "TD", "FIX", "ERA",
          "PD", "PGH", "PL",
          "TRY", "FLY", "NPY",
          "PERF", "FURB", "LOG",
          "RUF",
          ]
ignore = [
    "TD002", "TD003", "TD004", "TD007", # Ignore errors for specific todos in code
    "S101", # Ignore asserts errors since cannot set for tests and would require for each project and tests specific pyproject configuration
    "ANN101", # MyPy is checking that part
    "ANN401", # If needed used deliberately
    "PT001", # Use fixtures without brackets if they have no arguments
    "B008", # FastAPI requires this for its dependency injection
    "COM812", # Ignoring, we don't want commas at the end if it is last element
    "D100", # allow missing docstring in public module
    "D101", # allow missing docstring in public class
    "D102", # allow missing docstring in public methods
    "D103", # allow missing docstring in public function
    "D104", # allow missing docstring in public package
    "D107", # allow missing docstring in __init__
    "D203", # choosing no blank line before docstrings on classes
    "D212", # choosing a line break at beginning of docstrings
    "D417", # not all arguments need documentation
    "EM101", # String literals when raising Exceptions are OK
    "FBT001", # boolean function arguments can be OK
    "FBT002", # boolean function arguments defaults can be OK
    "FIX002", # TODOs in code are acceptable
    "G004", # f-strings in logs are OK, really
    "PT023", # We want to be able to call pytest mark without parenthesis
    "ISC001", # ruff is suggesting that this can conflict with the formatter
    "TRY003", # It's fine to use string messages when raising exceptions like ValueError
]

fixable = ["ALL"]
unfixable = []

# TODO set that to the standard logger object when there's one
# https://docs.astral.sh/ruff/settings/#lint_logger-objects
# logger-objects = []

[tool.ruff.lint.pydocstyle]
# Google style of docstrings.
convention = "google"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
force-sort-within-sections = true

[tool.ruff.format]
docstring-code-format = true

[tool.bandit]
skips = ["B101"]

# [tool.pytest.ini_options]
# filterwarnings = [
#     'ignore:distutils Version classes are deprecated:DeprecationWarning',
#     'ignore:"@coroutine" decorator is deprecated since:DeprecationWarning',
# ]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
